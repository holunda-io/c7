---

title: Quick Start
pageId: 'quick-start'

---

== {{ page.title }}

TIP: If you are using the extension from an application containing Camunda BPM Engine classes on the classpath, please check the
link:../user-guide/examples#_usage_inside_a_process_application[Working Example] section of our user guide.

== Install Dependency

First install the extension dependency:
[source, xml]
----
<properties>
  <camunda-rest-client-spring-boot.version>0.0.3</camunda-rest-client-spring-boot.version>
</properties>

<dependency>
  <groupId>org.camunda.bpm.extension.rest</groupId>
  <artifactId>camunda-rest-client-spring-boot-starter</artifactId>
  <version>${camunda-rest-client-spring-boot.version}</version>
</dependency>
----
and configure Feign and Feign client:

[source, xml]
----
<properties>
  <spring-cloud.version>Hoxton.SR2</spring-cloud.version>
</properties>

<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-dependencies</artifactId>
      <version>${spring-cloud.version}</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>

<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>
<dependency>
  <groupId>io.github.openfeign</groupId>
  <artifactId>feign-httpclient</artifactId>
</dependency>
----

== Configuration
In your client code, activate the usage of REST client by adding the following annotation
to your configuration:

[source, java]
----
@Configuration
@EnableCamundaRestClient
public class MyClientConfiguration {

}
----

In order to configure the feign client, make sure to provide usual feign client configuration
(e.g. using `application.yml`). To set-up the engine base URL, please set-up the property:

[source, yml]
----
feign:
  client:
    config:
      remoteRuntimeService:
        url: "http://your-process-engine-host/rest/engine/default/"
----

== Usage
To access the remote API, inject the remote API implementation:

[source,java]
----
@Component
public class MyClient {

    private RuntimeService runtimeService;

    public MyClient(@Qualifier("remote") RuntimeService runtimeService) {
        this.runtimeService = runtimeService;
    }

    public void start() {
        this.runtimeService
            .startProcessInstanceByKey("my_process_key");
    }

    public void correlate() {
        this.runtimeService
            .createMessageCorrelation("message_received")
            .processInstanceBusinessKey("WAIT_FOR_MESSAGE")
            .correlateAllWithResult();
    }
}
----

