---

title: Working example

---

== {{ page.title }}

The example demonstrates the usage of the library for accessing a remote process engine. For this purpose, imagine the process engine has the following process deployed:

image::{{baseUrl('assets/media/process_messaging.png')}}["Example messaging process" 60% 60%]

The remote client (running technically in the same JVM, but accessing the engine via REST) executes the following steps:

.Timing overview of the example
[cols="20%,20%,60%", width="100%"]
|===
| Initial offset | Repeat | Invoked method

|  8.0 sec  | - | Get deployed processes

| 10.0 sec  | 5 sec | Start process

| 12.5 sec  | 5 sec | Send signal

| 13.0 sec  | 5 sec | Correlate message
|===

== How does it work

The application uses the library by adding it to the classpath via Apache Maven dependency. Thast is:

[source,xml]
----
    <dependency>
      <groupId>org.camunda.bpm.extension.rest</groupId>
      <artifactId>camunda-rest-client-spring-boot</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
    <dependency>
      <groupId>io.github.openfeign</groupId>
      <artifactId>feign-httpclient</artifactId>
    </dependency>
----

In order to activate the library, the `@EnableFeignClients` and `@EnableCamundaRestClient` has been put
on the configuration class of the application. The interesting part is now the `ProcessClient` component.
This Spring Component has several methods marked with `@Scheduled` annotation to demonstrate the time-based execution
of desired functionality. To do so, the component has two injected resources, bothe marked with the `@Qualifier("remote")`
annotation. This annotation indicates that the remote version of the Camunda API services are required.

In order to configure the library, a block of properties e.g. in `application.yml` is required:

[source,yml]
----
feign:
  client:
    config:
      remoteRuntimeService:
        url: "http://localhost:8083/rest/engine/default/"
      remoteRepositoryService:
        url: "http://localhost:8083/rest/engine/default/"
----

