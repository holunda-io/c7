name: Compatibility check

on:
  push:
    branches:
      - '*'
      - '**/*'
      - 'master'

jobs:
  build:
    strategy:
      fail-fast: false
      # Build for three operating systems, currently JVMs 11, 17 and latest four Camunda versions (last two years)
      # We run Legacy support test on Ubuntu, JDK 1.8 until 7.10 (Release end of 2018).
      matrix:
        os:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
        jdk:
          - '11'
          - '17' # no official support yet by Camunda
        camunda-version:
          - '7.19' # 2023
          - '7.18'
          - '7.17' # 2022
          - '7.16' # 2021
          - '7.15'
        include:
          - os: 'ubuntu-latest'
            jdk: '8' # Checking legacy JDK 8 support with old Camunda versions
            camunda-version:
              - '7.18'
              - '7.17' # 2022
              - '7.16' # 2021
              - '7.15'
              - '7.14' # 2020
              - '7.13'
              - '7.12' # 2019
              - '7.11'
              - '7.10' # 2018

    runs-on: ${{ matrix.os }}
    steps:
      - name: Set git core.longpaths flag 
        run: git config --global core.longpaths true

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache .m2
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.jdk }}

      - name: Prepare Maven Wrapper
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean verify -U -B -T4 "-Pregression-test" "-Dcamunda.version=${{ matrix.camunda-version }}.0" -DskipExamples
