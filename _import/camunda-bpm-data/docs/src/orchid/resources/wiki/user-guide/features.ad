---
title: Features
---

== {{ page.title }}

* Process Variables
- The library provides a way to construct a generic adapter for every process variable.
- The adapter contains variable type.
- The adapter can be applied in any context (`RuntimeService`, `TaskService`, `DelegateExecution`, `DelegateTask`, `VariableMap`).
- The adapter offers methods to read, write, update and remove variable values.
- The adapter works for all types supported by Camunda BPM. This includes primitive types, object and container types ( `List<T>`, `Set<T>`, `Map<K , V>` ).
- The adapter supports global / local variables.
- The adapter support transient variables.
- Fluent builders are available in order to set, remove or update multiple variables in the same context.
* Process Variable Guards
- Generic support for `VariableGuard` for evaluation of a list of `VariableCondition`s
- Condition to check if variable exists.
- Condition to check if variable doesn't exist
- Condition to check if variable has a predefined value.
- Condition to check if variable has one of predefined values.
- Condition to check if variable matches condition specified by a custom function.
- `AbstractGuardTaskListener` to construct variable conditions guards easily.
- `AbstractGuardExecutionListener` to construct variable conditions guards easily.
* Anti-Corruption-Layer
- Generic support for `AntiCorruptionLayer` for protection and influence of variable modification in signalling and message correlation.
- Provide helper methods for the client to wrap variables in a transient carrier.
- Provide execution listener to handle `VariableGuard`-based conditions and `VariableMapTransformer`-based modifications.
- Provide task listener to handle `VariableGuard`-based conditions and `VariableMapTransformer`-based modifications.
- Provide factory methods to create `AntiCorruptionLayer` with a `VariableGuard` (see `CamundaBpmDataACL`)
- Provide factory methods to create `AntiCorruptionLayer` without a `VariableGuard` (see `CamundaBpmDataMapper`)
* Testing variable access and mocking `RuntimeService` and `TaskService`.
- Builder to create Mockito-based behaviour of `RuntimeService` accessing variables.
- Builder to create Mockito-based behaviour of `TaskServiceService` accessing variables.
- Verifier to check correct access to variables in  `RuntimeService`
- Verifier to check correct access to variables in  `TaskService`
