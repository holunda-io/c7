{
  "className": "io.holunda.camunda.bpm.data.itest.VariableScopeAdapterITest",
  "name": "Variable Scope Adapter I",
  "scenarios": [
    {
      "className": "io.holunda.camunda.bpm.data.itest.VariableScopeAdapterITest",
      "testMethodName": "should write to local variable scope and read",
      "description": "should write to local variable scope and read",
      "tagIds": [],
      "explicitParameters": [],
      "derivedParameters": [],
      "casesAsTable": false,
      "scenarioCases": [
        {
          "caseNr": 1,
          "steps": [
            {
              "name": "process with modifying delegate is deployed",
              "words": [
                {
                  "value": "Given",
                  "isIntroWord": true
                },
                {
                  "value": "process with modifying delegate is deployed"
                },
                {
                  "value": "process_with_delegate",
                  "argumentInfo": {
                    "argumentName": "processDefinitionKey",
                    "formattedValue": "process_with_delegate"
                  }
                },
                {
                  "value": "${writeVariablesToScopeAndLocal}",
                  "argumentInfo": {
                    "argumentName": "modifyingDelegateExpression",
                    "formattedValue": "${writeVariablesToScopeAndLocal}"
                  }
                },
                {
                  "value": "${readLocalFromVariableScope}",
                  "argumentInfo": {
                    "argumentName": "delegateExpression",
                    "formattedValue": "${readLocalFromVariableScope}"
                  }
                }
              ],
              "status": "PASSED",
              "durationInNanos": 663699800
            },
            {
              "name": "get process definition",
              "words": [
                {
                  "value": "When",
                  "isIntroWord": true
                },
                {
                  "value": "get process definition"
                }
              ],
              "status": "PASSED",
              "durationInNanos": 5688800
            },
            {
              "name": "process is started with variables",
              "words": [
                {
                  "value": "process is started with variables"
                },
                {
                  "value": "process_with_delegate",
                  "argumentInfo": {
                    "argumentName": "processDefinitionKey",
                    "formattedValue": "process_with_delegate"
                  }
                },
                {
                  "value": "{\n}",
                  "argumentInfo": {
                    "argumentName": "variables",
                    "formattedValue": "{\n}"
                  }
                }
              ],
              "status": "PASSED",
              "durationInNanos": 209726200
            },
            {
              "name": "variables had value",
              "words": [
                {
                  "value": "Then",
                  "isIntroWord": true
                },
                {
                  "value": "variables had value"
                },
                {
                  "value": "{Double Variable\u003d14.0, Complex Variable\u003dComplexDataStructure(stringValue\u003dfoobar, intValue\u003d12, dateValue\u003dThu Dec 12 15:55:54 CET 2019), List Of String Variable\u003d[Foo, Bar], Short Variable\u003d12, Map Of String to Date Variable\u003d{Ten\u003dThu Dec 12 15:55:54 CET 2019, Nine\u003dThu Dec 12 15:55:54 CET 2019}, Date Variable\u003dThu Dec 12 15:55:54 CET 2019, Long Variable\u003d815, Set Of String Variable\u003d[Homer, Marge], Int Variable\u003d124, String Variable\u003dlocalValue, Boolean Variable\u003dfalse}",
                  "argumentInfo": {
                    "argumentName": "readValues",
                    "formattedValue": "{Double Variable\u003d14.0, Complex Variable\u003dComplexDataStructure(stringValue\u003dfoobar, intValue\u003d12, dateValue\u003dThu Dec 12 15:55:54 CET 2019), List Of String Variable\u003d[Foo, Bar], Short Variable\u003d12, Map Of String to Date Variable\u003d{Ten\u003dThu Dec 12 15:55:54 CET 2019, Nine\u003dThu Dec 12 15:55:54 CET 2019}, Date Variable\u003dThu Dec 12 15:55:54 CET 2019, Long Variable\u003d815, Set Of String Variable\u003d[Homer, Marge], Int Variable\u003d124, String Variable\u003dlocalValue, Boolean Variable\u003dfalse}"
                  }
                },
                {
                  "value": "[(io.holunda.camunda.bpm.data.factory.BasicVariableFactory@2df9b86, localValue), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@37654521, Thu Dec 12 15:55:54 CET 2019), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@15aab8c6, 12), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@33990a0c, 124), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@4de4b452, 815), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@50b5ac82, 14.0), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@101952da, false), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@6babf3bf, ComplexDataStructure(stringValue\u003dfoobar, intValue\u003d12, dateValue\u003dThu Dec 12 15:55:54 CET 2019)), (io.holunda.camunda.bpm.data.factory.ListVariableFactory@3059cbc, [Foo, Bar]), (io.holunda.camunda.bpm.data.factory.SetVariableFactory@7ea9e1e2, [Homer, Marge]), (io.holunda.camunda.bpm.data.factory.MapVariableFactory@24fcf36f, {Ten\u003dThu Dec 12 15:55:54 CET 2019, Nine\u003dThu Dec 12 15:55:54 CET 2019})]",
                  "argumentInfo": {
                    "argumentName": "variablesWithValue",
                    "formattedValue": "[(io.holunda.camunda.bpm.data.factory.BasicVariableFactory@2df9b86, localValue), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@37654521, Thu Dec 12 15:55:54 CET 2019), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@15aab8c6, 12), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@33990a0c, 124), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@4de4b452, 815), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@50b5ac82, 14.0), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@101952da, false), (io.holunda.camunda.bpm.data.factory.BasicVariableFactory@6babf3bf, ComplexDataStructure(stringValue\u003dfoobar, intValue\u003d12, dateValue\u003dThu Dec 12 15:55:54 CET 2019)), (io.holunda.camunda.bpm.data.factory.ListVariableFactory@3059cbc, [Foo, Bar]), (io.holunda.camunda.bpm.data.factory.SetVariableFactory@7ea9e1e2, [Homer, Marge]), (io.holunda.camunda.bpm.data.factory.MapVariableFactory@24fcf36f, {Ten\u003dThu Dec 12 15:55:54 CET 2019, Nine\u003dThu Dec 12 15:55:54 CET 2019})]"
                  }
                }
              ],
              "status": "PASSED",
              "durationInNanos": 97786200
            }
          ],
          "explicitArguments": [],
          "derivedArguments": [],
          "status": "SUCCESS",
          "success": true,
          "durationInNanos": 1080737000
        }
      ],
      "durationInNanos": 1080737000,
      "executionStatus": "SUCCESS"
    }
  ],
  "tagMap": {}
}